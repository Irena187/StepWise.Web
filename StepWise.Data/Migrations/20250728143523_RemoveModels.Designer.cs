// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StepWise.Data;

#nullable disable

namespace StepWise.Data.Migrations
{
    [DbContext(typeof(StepWiseDbContext))]
    [Migration("20250728143523_RemoveModels")]
    partial class RemoveModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StepWise.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_AspNetUsers_Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .HasDatabaseName("IX_AspNetUsers_UserName");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9aa837cb-48a8-47b4-8e0e-74c57fa25b0f",
                            Email = "john.developer@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "JOHN.DEVELOPER@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DEVELOPER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEPkMvXWLwFS24sCFleJRp7/Hdzd2aAJrQzbhJgVDOywM9B5WmFQqbL/ifNQaOwJzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7931b28-c96a-4164-afff-c138ed8a3ac1",
                            TwoFactorEnabled = false,
                            UserName = "john.developer@example.com"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6731bd9a-a68f-4412-a576-c9c6895d51bc",
                            Email = "sarah.datascientist@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SARAH.DATASCIENTIST@EXAMPLE.COM",
                            NormalizedUserName = "SARAH.DATASCIENTIST@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyNyZ76meR0IvzAaMqT1ELUOsG7qM2Hg73cuYlq29lbXyKno8zoZ1FLKqXkPhUXKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3cdec087-5442-4470-a782-44f84f2d3d8f",
                            TwoFactorEnabled = false,
                            UserName = "sarah.datascientist@example.com"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a805a90-9fea-4649-aa34-ce53a0a19786",
                            Email = "mike.mobile@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MIKE.MOBILE@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.MOBILE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECCQ9ZxY9XZwI2Cl4H0dsmz4wv+kfMf2jjTOFzScftwEVn/ao1n3Pe6/5uVDNKJfoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61695034-2191-4293-97ed-060d9d7f13c3",
                            TwoFactorEnabled = false,
                            UserName = "mike.mobile@example.com"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78471f08-f570-4440-bec9-cec8cae3e518",
                            Email = "alex.devops@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ALEX.DEVOPS@EXAMPLE.COM",
                            NormalizedUserName = "ALEX.DEVOPS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDiTVHX619tWWTH2saUQ07aebnKLGNenS3JoPHjmjSzUDEGlOY55wmVI11cROZFm4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "751b4972-5450-4877-97bd-378bc4131473",
                            TwoFactorEnabled = false,
                            UserName = "alex.devops@example.com"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc5cc232-a41f-4f36-b44b-60188aeba142",
                            Email = "emma.security@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "EMMA.SECURITY@EXAMPLE.COM",
                            NormalizedUserName = "EMMA.SECURITY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXJ5db/wMrKoXHvM5XV4KWY9cZ2dux0/XjkpsoRoFZ+sT2mLtbKH1/3pqeTelR0+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56d1c07d-3793-4632-8c36-1f69c21d3b1f",
                            TwoFactorEnabled = false,
                            UserName = "emma.security@example.com"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f940be7-54ed-4a92-b74b-35460fc293d9",
                            Email = "david.designer@example.com",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "DAVID.DESIGNER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.DESIGNER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhr4hr1AumOgqN2gIOhlTZ1dtLHVi7UtBIZK7QSGATMm5QO7ef8NMlKGmk0tFi//Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37ecccb7-8076-4eea-8cf9-52047c7c06c9",
                            TwoFactorEnabled = false,
                            UserName = "david.designer@example.com"
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("GoalProfession")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("The final profession that this career path leads to.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Did the user make this career path public or private?");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("IX_CareerPaths_CreatorId");

                    b.HasIndex("GoalProfession")
                        .HasDatabaseName("IX_CareerPaths_GoalProfession");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_CareerPaths_IsDeleted");

                    b.HasIndex("IsPublic")
                        .HasDatabaseName("IX_CareerPaths_IsPublic");

                    b.ToTable("CareerPaths");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CreatorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "A comprehensive path to becoming a full-stack web developer, covering both frontend and backend technologies.",
                            GoalProfession = "Full-Stack Web Developer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Full-Stack Web Developer"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            CreatorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Learn the fundamentals of data science, including statistics, machine learning, and data visualization.",
                            GoalProfession = "Data Scientist",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Data Scientist"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            CreatorId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Master mobile app development for iOS and Android platforms using modern frameworks.",
                            GoalProfession = "Mobile App Developer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Mobile App Developer"
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-0123-defa-456789012345"),
                            CreatorId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Learn the practices and tools needed to bridge development and operations teams.",
                            GoalProfession = "DevOps Engineer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "DevOps Engineer"
                        },
                        new
                        {
                            Id = new Guid("e5f6a7b8-c9d0-1234-efab-567890123456"),
                            CreatorId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Description = "Develop skills in information security, ethical hacking, and security architecture.",
                            GoalProfession = "Cybersecurity Specialist",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Cybersecurity Specialist"
                        },
                        new
                        {
                            Id = new Guid("f6a7b8c9-d0e1-2345-fabc-678901234567"),
                            CreatorId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Description = "Learn user experience design principles and create intuitive, beautiful user interfaces.",
                            GoalProfession = "UX/UI Designer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "UX/UI Designer"
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CareerPathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2")
                        .HasComment("When is the time this step should be completed?");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Did the user complete this step?");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("The type of step(Course, Book, Job...)");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The url address to the reference.");

                    b.HasKey("Id");

                    b.HasIndex("CareerPathId")
                        .HasDatabaseName("IX_CareerSteps_CareerPathId");

                    b.HasIndex("Deadline")
                        .HasDatabaseName("IX_CareerSteps_Deadline");

                    b.HasIndex("IsCompleted")
                        .HasDatabaseName("IX_CareerSteps_IsCompleted");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_CareerSteps_IsDeleted");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_CareerSteps_Type");

                    b.ToTable("CareerSteps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CareerPathId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Description = "Master the building blocks of web development with HTML structure and CSS styling.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Learn HTML & CSS Fundamentals",
                            Type = 0,
                            Url = "https://www.freecodecamp.org/learn/responsive-web-design/"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CareerPathId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Description = "Learn JavaScript programming language basics including variables, functions, and DOM manipulation.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "JavaScript Fundamentals",
                            Type = 0,
                            Url = "https://javascript.info/"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CareerPathId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Description = "Build modern user interfaces with React components, state management, and hooks.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "React.js Framework",
                            Type = 0,
                            Url = "https://reactjs.org/tutorial/tutorial.html"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CareerPathId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Description = "Create server-side applications using Node.js and Express framework.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Node.js & Express Backend",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            CareerPathId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Description = "Learn relational database design and SQL queries for data management.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Database Design & SQL",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            CareerPathId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Description = "Create 3-5 full-stack projects to showcase your skills to potential employers.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Build Portfolio Projects",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CareerPathId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            Description = "Learn Python syntax, data structures, and basic programming concepts.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Python Programming Basics",
                            Type = 0,
                            Url = "https://www.python.org/about/gettingstarted/"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            CareerPathId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            Description = "Understand statistical concepts, probability, and linear algebra fundamentals.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Statistics and Mathematics",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            CareerPathId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            Description = "Master data manipulation and analysis using Python's most popular libraries.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Pandas & NumPy for Data Analysis",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            CareerPathId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            Description = "Learn supervised and unsupervised learning algorithms and their applications.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Machine Learning Fundamentals",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000005"),
                            CareerPathId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            Description = "Create compelling visualizations to communicate data insights effectively.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Data Visualization with Matplotlib & Seaborn",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CareerPathId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            Description = "Learn Swift fundamentals for iOS development including syntax and concepts.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Swift Programming Language",
                            Type = 0,
                            Url = "https://developer.apple.com/swift/"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            CareerPathId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            Description = "Build native iOS applications using UIKit framework and Xcode.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "iOS Development with UIKit",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            CareerPathId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            Description = "Create Android applications using Kotlin and Android Studio.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Android Development with Kotlin",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            CareerPathId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            Description = "Build apps for both iOS and Android using React Native framework.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "Cross-Platform Development with React Native",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            CareerPathId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            Description = "Learn the process of publishing apps to Apple App Store and Google Play Store.",
                            IsCompleted = false,
                            IsDeleted = false,
                            Title = "App Store Deployment",
                            Type = 6
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.Creator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Creators_IsDeleted");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Creators_UserId");

                    b.ToTable("Creators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsDeleted = false,
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            IsDeleted = false,
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            IsDeleted = false,
                            UserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            IsDeleted = false,
                            UserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            IsDeleted = false,
                            UserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            IsDeleted = false,
                            UserId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff")
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.UserCareerPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CareerPathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FollowedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 7, 28, 14, 35, 22, 497, DateTimeKind.Utc).AddTicks(6982))
                        .HasComment("When the user bookmarked this career path");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Is this bookmark relationship active?");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CareerPathId")
                        .HasDatabaseName("IX_UserCareerPaths_CareerPathId");

                    b.HasIndex("FollowedAt")
                        .HasDatabaseName("IX_UserCareerPaths_FollowedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserCareerPaths_IsActive");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_UserCareerPaths_IsDeleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserCareerPaths_UserId");

                    b.HasIndex("UserId", "CareerPathId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserCareerPaths_UserId_CareerPathId");

                    b.ToTable("UserCareerPaths");
                });

            modelBuilder.Entity("StepWise.Data.Models.UserCareerStepCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CareerStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CareerStepId");

                    b.HasIndex("UserId", "CareerStepId")
                        .IsUnique();

                    b.ToTable("UserCareerStepCompletions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerPath", b =>
                {
                    b.HasOne("StepWise.Data.Models.Creator", "Creator")
                        .WithMany("CareerPaths")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerStep", b =>
                {
                    b.HasOne("StepWise.Data.Models.CareerPath", "CareerPath")
                        .WithMany("Steps")
                        .HasForeignKey("CareerPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPath");
                });

            modelBuilder.Entity("StepWise.Data.Models.Creator", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", "User")
                        .WithOne("Creator")
                        .HasForeignKey("StepWise.Data.Models.Creator", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StepWise.Data.Models.UserCareerPath", b =>
                {
                    b.HasOne("StepWise.Data.Models.CareerPath", "CareerPath")
                        .WithMany("Followers")
                        .HasForeignKey("CareerPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StepWise.Data.Models.ApplicationUser", "User")
                        .WithMany("FollowedCareerPaths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPath");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StepWise.Data.Models.UserCareerStepCompletion", b =>
                {
                    b.HasOne("StepWise.Data.Models.CareerStep", "CareerStep")
                        .WithMany()
                        .HasForeignKey("CareerStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StepWise.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerStep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StepWise.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Creator");

                    b.Navigation("FollowedCareerPaths");
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerPath", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("StepWise.Data.Models.Creator", b =>
                {
                    b.Navigation("CareerPaths");
                });
#pragma warning restore 612, 618
        }
    }
}
