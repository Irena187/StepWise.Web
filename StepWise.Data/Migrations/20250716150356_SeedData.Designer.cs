// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StepWise.Data;

#nullable disable

namespace StepWise.Data.Migrations
{
    [DbContext(typeof(StepWiseDbContext))]
    [Migration("20250716150356_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProfessionSkill", b =>
                {
                    b.Property<Guid>("ProfessionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequiredSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfessionsId", "RequiredSkillsId");

                    b.HasIndex("RequiredSkillsId");

                    b.ToTable("ProfessionSkill");
                });

            modelBuilder.Entity("StepWise.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_AspNetUsers_Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .HasDatabaseName("IX_AspNetUsers_UserName");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88dd3aee-7f23-4927-b519-ef603d4b418c",
                            Email = "john.developer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "JOHN.DEVELOPER@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DEVELOPER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKBaHjE2BYEF9ZFys625xcdQQg6grT983uOtUDthjuaBU5/822oJH0TIBfoGKjIKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af40aa4e-b1aa-48ec-82c6-c2244530d87c",
                            TwoFactorEnabled = false,
                            UserName = "john.developer@example.com"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83f9b5b6-0c93-4bb9-bc08-161ac0131312",
                            Email = "sarah.datascientist@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SARAH.DATASCIENTIST@EXAMPLE.COM",
                            NormalizedUserName = "SARAH.DATASCIENTIST@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAk+IF1OgzyHC5WxPGYWexsKORmguo/76tQaNX4xxhFTNyCjn7MuwFbElKB+C4IGWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04d961fa-876a-4b51-9045-640a8abae5bd",
                            TwoFactorEnabled = false,
                            UserName = "sarah.datascientist@example.com"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13edcae9-bb98-4e82-89d8-574d56265c0c",
                            Email = "mike.mobile@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MIKE.MOBILE@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.MOBILE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHj08JzCS41jYrSkGv95tPeKNQ+iZz0R5tEQ4oTyJXyduYufQI0IjteNiNkWDRgzZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9451209-1aad-4eea-9fa5-fff7efcce3f4",
                            TwoFactorEnabled = false,
                            UserName = "mike.mobile@example.com"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a072277-c664-42c9-8a37-7f29b249be56",
                            Email = "alex.devops@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ALEX.DEVOPS@EXAMPLE.COM",
                            NormalizedUserName = "ALEX.DEVOPS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEi/0acttbXDRlbpS4VA9paYNsdNFTlkrWh4Qqw6ivmlhZS3+H/eKqZ4xAesP4sTUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8770e00-f073-4f0d-b8c8-e365ea847c0c",
                            TwoFactorEnabled = false,
                            UserName = "alex.devops@example.com"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3d94f9a-21bb-41ca-9c40-00b18612d2e8",
                            Email = "emma.security@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "EMMA.SECURITY@EXAMPLE.COM",
                            NormalizedUserName = "EMMA.SECURITY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMiTnJjwRBvLUUm61yoig5E9vDAQodlDYUG3O5asCpymHdMRaTWxDymBocEF/8lm8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb3547de-e0a8-4c1b-b37c-b8db3c948d1f",
                            TwoFactorEnabled = false,
                            UserName = "emma.security@example.com"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69a63dc3-89a0-46f6-9b2b-87ecacf8f95f",
                            Email = "david.designer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DAVID.DESIGNER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.DESIGNER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEZaLChyBQ8Myq6txJEwXaBOI7yFt5RGfqYLhRp60gQq2gR20jGdgNYOL9e1oa+Mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e3d6416-23f5-4224-a954-f759c2d42052",
                            TwoFactorEnabled = false,
                            UserName = "david.designer@example.com"
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.CalendarTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CalendarTasks", t =>
                        {
                            t.HasComment("Calendar tasks that the user added to their calendar of events or deadlines");
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("GoalProfession")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("The final profession that this career path leads to.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Did the user make this career path public or private?");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("IX_CareerPaths_CreatorId");

                    b.HasIndex("GoalProfession")
                        .HasDatabaseName("IX_CareerPaths_GoalProfession");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_CareerPaths_IsDeleted");

                    b.HasIndex("IsPublic")
                        .HasDatabaseName("IX_CareerPaths_IsPublic");

                    b.ToTable("CareerPaths");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CreatorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "A comprehensive path to becoming a full-stack web developer, covering both frontend and backend technologies.",
                            GoalProfession = "Full-Stack Web Developer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Full-Stack Web Developer"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            CreatorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Learn the fundamentals of data science, including statistics, machine learning, and data visualization.",
                            GoalProfession = "Data Scientist",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Data Scientist"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            CreatorId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Master mobile app development for iOS and Android platforms using modern frameworks.",
                            GoalProfession = "Mobile App Developer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Mobile App Developer"
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-0123-defa-456789012345"),
                            CreatorId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Learn the practices and tools needed to bridge development and operations teams.",
                            GoalProfession = "DevOps Engineer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "DevOps Engineer"
                        },
                        new
                        {
                            Id = new Guid("e5f6a7b8-c9d0-1234-efab-567890123456"),
                            CreatorId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Description = "Develop skills in information security, ethical hacking, and security architecture.",
                            GoalProfession = "Cybersecurity Specialist",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "Cybersecurity Specialist"
                        },
                        new
                        {
                            Id = new Guid("f6a7b8c9-d0e1-2345-fabc-678901234567"),
                            CreatorId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Description = "Learn user experience design principles and create intuitive, beautiful user interfaces.",
                            GoalProfession = "UX/UI Designer",
                            IsDeleted = false,
                            IsPublic = true,
                            Title = "UX/UI Designer"
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CareerPathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2")
                        .HasComment("When is the time this step should be completed?");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Did the user complete this step?");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("The type of step(Course, Book, Job...)");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("The url address to the reference.");

                    b.HasKey("Id");

                    b.HasIndex("CareerPathId")
                        .HasDatabaseName("IX_CareerSteps_CareerPathId");

                    b.HasIndex("Deadline")
                        .HasDatabaseName("IX_CareerSteps_Deadline");

                    b.HasIndex("IsCompleted")
                        .HasDatabaseName("IX_CareerSteps_IsCompleted");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_CareerSteps_IsDeleted");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_CareerSteps_Type");

                    b.ToTable("CareerSteps");
                });

            modelBuilder.Entity("StepWise.Data.Models.Creator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Creators_IsDeleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Creators_UserId");

                    b.ToTable("Creators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsDeleted = false,
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            IsDeleted = false,
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            IsDeleted = false,
                            UserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            IsDeleted = false,
                            UserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            IsDeleted = false,
                            UserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            IsDeleted = false,
                            UserId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff")
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes", t =>
                        {
                            t.HasComment("Notes that users can write to themselves to keep track of what they have completed.");
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("The industry of this profession");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Professions", t =>
                        {
                            t.HasComment("All of the professions");
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Skills", t =>
                        {
                            t.HasComment("Skill in a profession");
                        });
                });

            modelBuilder.Entity("StepWise.Data.Models.UserCareerPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CareerPathId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FollowedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 7, 16, 15, 3, 55, 20, DateTimeKind.Utc).AddTicks(6917))
                        .HasComment("When the user bookmarked this career path");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Is this bookmark relationship active?");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CareerPathId")
                        .HasDatabaseName("IX_UserCareerPaths_CareerPathId");

                    b.HasIndex("FollowedAt")
                        .HasDatabaseName("IX_UserCareerPaths_FollowedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserCareerPaths_IsActive");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_UserCareerPaths_IsDeleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserCareerPaths_UserId");

                    b.HasIndex("UserId", "CareerPathId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserCareerPaths_UserId_CareerPathId");

                    b.ToTable("UserCareerPaths");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfessionSkill", b =>
                {
                    b.HasOne("StepWise.Data.Models.Profession", null)
                        .WithMany()
                        .HasForeignKey("ProfessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StepWise.Data.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("RequiredSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StepWise.Data.Models.CalendarTask", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerPath", b =>
                {
                    b.HasOne("StepWise.Data.Models.Creator", "Creator")
                        .WithMany("CareerPaths")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerStep", b =>
                {
                    b.HasOne("StepWise.Data.Models.CareerPath", "CareerPath")
                        .WithMany("Steps")
                        .HasForeignKey("CareerPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPath");
                });

            modelBuilder.Entity("StepWise.Data.Models.Creator", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StepWise.Data.Models.Note", b =>
                {
                    b.HasOne("StepWise.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StepWise.Data.Models.UserCareerPath", b =>
                {
                    b.HasOne("StepWise.Data.Models.CareerPath", "CareerPath")
                        .WithMany("Followers")
                        .HasForeignKey("CareerPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StepWise.Data.Models.ApplicationUser", "User")
                        .WithMany("FollowedCareerPaths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPath");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StepWise.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("FollowedCareerPaths");
                });

            modelBuilder.Entity("StepWise.Data.Models.CareerPath", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("StepWise.Data.Models.Creator", b =>
                {
                    b.Navigation("CareerPaths");
                });
#pragma warning restore 612, 618
        }
    }
}
